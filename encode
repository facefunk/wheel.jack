#!/usr/bin/env bash

. panic

# MAX_SIZE is the maximum file size to encode videos to.
MAX_SIZE=32000000000 # 4GB in bits
# MAX_BIT_RATE is the maximum total target bitrate, audio and video combined, to encode videos to.
MAX_BITRATE=10000000
# A_MAX_BITRATE is the maximum audio bitrate to encode video audio to.
A_MAX_BITRATE=128000
# V_BUFFER_SECONDS is the buffer size to use when calculating bitrate.
# Lower = more accurate output bitrate, lower chance of player buffering.
# higher = more efficient compression, lower chance of blocky frames.
# 2 seconds is a usual happy medium.
V_BUFFER_SECONDS=2

floor() {
    awk "BEGIN{printf(\"%d\", $1)}"
}

probe() {
    ffprobe -v error -select_streams $1:0 -show_entries $2 -of default=nw=1:nk=1 "$localName"
}

escape() {
    sed -r 's|[$!\\`]|\\&|g' <<< "$1"
}

notNumeric() {
    awk -v a="$1" 'BEGIN{exit(a==a+0)}'
}

scan() {
    ffprobe -v error -select_streams $1:0 -show_entries packet=size,duration_time "$localName" | \
    awk -v BUFFER_SECONDS="$V_BUFFER_SECONDS" 'BEGIN {
        FS="="
    }
    /size/ {
        sampleBytes+=$2
        if(sampleDuration >= BUFFER_SECONDS) {
            meanBitrate=sampleBytes*8/sampleDuration
            if(meanBitrate > maxMeanBitrate) maxMeanBitrate = meanBitrate
            sampleBytes=0
            sampleDuration=0
        }
    }
    /duration_time/ {
        sampleDuration+=$2
    }
    END {
        printf("%d\n", maxMeanBitrate)
    }'
}

[[ -n $1 && -n $2 && -n $3 ]] || panic "Usage: encode [newName] [title] [localName] [?forceEncode]"
newName="$1"
title="$2"
localName="$3"
forceEncode="$4"

command="< /dev/null ffmpeg -hide_banner -y -i \"$(escape "$localName")\""

subNum=0
while IFS=$'\t' read -r subFile subTitle subLang subForced; do
    mapNum=$((subNum+1))
    command+=" -i \"$(escape "$subFile")\""
    sub+=" -map $mapNum -metadata:s:s:$subNum title=\"$(escape "$subTitle")\""
    sub+=" -metadata:s:s:$subNum language=\"$(escape "$subLang")\""
    # Forced subtitle tracks often have samples that are more than INT_MAX microseconds (35m47.48s) apart. In this case
    # ffmpeg throws a warning and piles all the subtitles up at the beginning of the video. An easy fix to avoid this is
    # to change the subtitle track's time base from microseconds to milliseconds. Now subtitles can be up to INT_MAX
    # milliseconds (24d20h31m23.65s) apart.
    sub+=" -time_base:s:$subNum 1:1000"
    # Until my patch fixing broken mov_text forced subtitles is rolled into git.ffmpeg.org/ffmpeg.git,
    # a version supporting forced subtitles can be found here: github.com/facefunk/FFmpeg
    [[ -n "$subForced" ]] && sub+=" -disposition:s:$subNum +default+forced"
    subNum=$mapNum
done < <(./sub-names "$localName")

vCodec=$(probe v stream=codec_name)
vLevel=$(probe v stream=level) # level returned without . so 4.1 = 41, 5.0 = 50
vDuration=$(probe v format=duration)
vBitrate=$(probe v stream=bit_rate)
vPixFmt=$(probe v stream=pix_fmt)
aCodec=$(probe a stream=codec_name)
aChannels=$(probe a stream=channels)
aBitrate=$(probe a stream=bit_rate)

notNumeric "$aBitrate" && aBitrate=$(scan a)
if notNumeric "$aBitrate" || [[ $aBitrate -gt $A_MAX_BITRATE ]]
then
    aBitrate=$A_MAX_BITRATE
    aEncode=1
fi

if [[ -n $aEncode || -n $forceEncode || "$aCodec" != "aac" || $aChannels -gt 2 || $aBitrate -gt $A_MAX_BITRATE ]]
then
    command+=" -acodec aac -ab $aBitrate -ac 2"
else
    command+=" -acodec copy"
fi

vMaxBitrate=$(floor "$MAX_SIZE / $vDuration - $aBitrate")
vRemBitrate=$(floor "$MAX_BITRATE - $aBitrate")
[[ $vMaxBitrate -gt $vRemBitrate ]] && vMaxBitrate=$vRemBitrate

notNumeric "$vBitrate" && vBitrate=$(scan v)
if notNumeric "$vBitrate" || [[ $vBitrate -gt $vMaxBitrate ]]
then
    vBitrate=$vMaxBitrate
    vEncode=1
fi

if [[ -n $vEncode || -n $forceEncode || "$vCodec" != "h264" || "$vLevel" = "5" || "$vLevel" = "51" || \
    "$vPixFmt" != "yuv420p" || $vBitrate -gt $vMaxBitrate ]]
then
    command+=" -vcodec h264 -profile:v high -level 41 -pix_fmt yuv420p"
    command+=" -vb $vBitrate -maxrate $vBitrate -bufsize $(floor "$V_BUFFER_SECONDS * $vBitrate")"
else
    command+=" -vcodec copy"
fi

[[ -n "$sub" ]] && command+=" -map 0 -scodec mov_text$sub"
command+=" -metadata title=\"$(escape "$title")\" \"$(escape "$newName")\""

echo "$command"
echo
eval "$command"
